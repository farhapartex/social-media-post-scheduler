name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7.4-alpine
        options: --entrypoint "redis-server"
        ports:
          - 6380:6379
      db:
        image: postgres:13
        options: >-
          --health-cmd="pg_isready -U user"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: password
          POSTGRES_DB: social_db
        ports:
          - "5433:5432"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Docker
        uses: docker/setup-buildx-action@v2
      
      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          
      - name: Install Docker Compose V2
        run: |
          mkdir -p $HOME/.docker/cli-plugins
          curl -SL https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-linux-x86_64 -o $HOME/.docker/cli-plugins/docker-compose
          chmod +x $HOME/.docker/cli-plugins/docker-compose
          docker compose version

      - name: Build Docker Image
        run: |
          docker compose build

      - name: Start Docker Services
        run: |
          docker compose up -d

      - name: Health Check - FastAPI
        run: |
          for i in {1..5}; do
            echo "Checking FastAPI service... Attempt $i"
            if curl -f http://localhost:8000; then
              echo "FastAPI is up and running!"
              break
            else
              echo "FastAPI not ready yet. Retrying in 5 seconds..."
              sleep 5
            fi
          done
          if [ $? -ne 0 ]; then
            echo "FastAPI failed to start."
            exit 1
          fi

      - name: Check Celery Worker Logs
        run: |
          docker compose logs celery_worker

      - name: Run Tests
        run: |
          docker compose run tests
        continue-on-error: true
        
      # - name: Collect Test Results
      #   if: always()
      #   run: |
      #     mkdir -p artifacts
      #     docker cp $(docker ps -qf "name=social_tests"):/app/.pytest_cache artifacts/
      #     docker cp $(docker ps -qf "name=social_tests"):/app/tests/logs artifacts/
      #   continue-on-error: true
      # - name: Upload Test Artifacts
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: test-results
      #     path: artifacts/

      - name: Stop & Clean all containers
        run: |
          docker compose down -v --remove-orphans

      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
      
      - name: Tag and Push Image
        run: |
          docker tag social-media-post-scheduler:latest ${{ secrets.DOCKER_HUB_USERNAME }}/social-media-post-scheduler:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/social-media-post-scheduler:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: SSH and Deploy
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            REPO_DIR="/home/ubuntu/social-media-post-scheduler"
            GIT_REPO_URL="https://github.com/farhapartex/social-media-post-scheduler.git"
            BRANCH="main"
            DOCKER_COMPOSE_FILE="docker-compose.prod.yml"

            echo "===== Starting Deployment ====="

            # Check if the directory exists
            if [ ! -d "$REPO_DIR" ]; then
                echo "Directory $REPO_DIR does not exist. Cloning the repository..."
                git clone $GIT_REPO_URL $REPO_DIR
            else
                echo "Directory $REPO_DIR exists. Pulling the latest changes..."
                cd $REPO_DIR
                # Check if it's a valid Git repository
                if [ -d ".git" ]; then
                    git fetch origin
                    git reset --hard origin/$BRANCH
                else
                    echo "ERROR: $REPO_DIR is not a valid Git repository."
                    exit 1
                fi
            fi

            cd $REPO_DIR

            echo "===== Setting Permissions ====="
            chmod +x deploy.sh

            echo "===== Stopping Existing Containers ====="
            docker-compose -f $DOCKER_COMPOSE_FILE down -v --remove-orphans

            echo "===== Pulling Latest Image from Docker Hub ====="
            docker-compose -f $DOCKER_COMPOSE_FILE pull

            echo "===== Starting Containers with the Latest Image ====="
            docker-compose -f $DOCKER_COMPOSE_FILE up -d --build

            echo "===== Running Database Migrations ====="
            docker-compose -f $DOCKER_COMPOSE_FILE exec web alembic upgrade head

            echo "===== Cleaning Up Old Docker Images ====="
            docker image prune -f

            echo "===== Deployment Completed Successfully! ====="
